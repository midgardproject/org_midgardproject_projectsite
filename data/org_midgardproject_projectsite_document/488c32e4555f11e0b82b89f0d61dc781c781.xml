<?xml version="1.0" encoding="UTF-8"?>
<midgard_object xmlns="http://www.midgard-project.org/midgard_object/1.8">
  <org_midgardproject_projectsite_document purge="no" action="updated" guid="488c32e4555f11e0b82b89f0d61dc781c781">
    <metadata>
      <creator>f6b665f1984503790ed91f39b11b5392</creator>
      <created>2011-03-23 15:07:34+0000</created>
      <revisor>f6b665f1984503790ed91f39b11b5392</revisor>
      <revised>2011-03-25 08:51:29+0000</revised>
      <revision>2</revision>
      <locker></locker>
      <locked>0001-01-01 00:00:00+0000</locked>
      <approver></approver>
      <approved>0001-01-01 00:00:00+0000</approved>
      <authors></authors>
      <owner></owner>
      <schedulestart>0001-01-01 00:00:00+0000</schedulestart>
      <scheduleend>0001-01-01 00:00:00+0000</scheduleend>
      <hidden>0</hidden>
      <navnoentry>0</navnoentry>
      <size>3729</size>
      <published>0001-01-01 00:00:00+0000</published>
      <score>0</score>
      <imported>0001-01-01 00:00:00+0000</imported>
      <exported>0001-01-01 00:00:00+0000</exported>
      <deleted>0</deleted>
      <isapproved>0</isapproved>
      <islocked>0</islocked>
    </metadata>
    <action></action>
    <id>3</id>
    <product>cf454da4553a11e08ae3f5e109c3d62dd62d</product>
    <title>Midgard MVC request process</title>
    <content>&amp;lt;div&amp;gt;&amp;lt;div&amp;gt;Basic building blocks:&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&amp;lt;b&amp;gt;Application&amp;lt;/b&amp;gt;: a configuration file describing the components and other settings used in a Midgard MVC website&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;b&amp;gt;Component&amp;lt;/b&amp;gt;: a PHP module intended to run as part of a web application. For example: a news listing. Provides routes, controllers and templates&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;b&amp;gt;Library&amp;lt;/b&amp;gt;: a PHP module that can be called by other modules to perform some task. Does not run as part of a website. For example: a form validation library&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;b&amp;gt;Service&amp;lt;/b&amp;gt;: a standardized interface to access a given functionality. For example: authentication&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;b&amp;gt;Provider&amp;lt;/b&amp;gt;: a standardized interface to access given information. For example: hierarchy. The difference between Services and Providers is that Services perform tasks while Providers merely provide access to a particular type of data&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h3&amp;gt;Bootstrapping&amp;lt;/h3&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;Midgard MVC bootstrap PHP file (framework.php) is called&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Midgard MVC bootstrap registers an autoloader (midgardmvc_core::autoload()) that will be used for loading the necessary PHP files&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Front controller (midgardmvc_core::get_instance()) starts&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Front controller loads configuration from a configuration provider&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Front controller loads component providers specified in configuration&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Front controller loads hierarchy providers specified in configuration&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;h3&amp;gt;Request processing&amp;lt;/h3&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;A request object gets populated with the current HTTP request parameters&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Process injectors are called, if the loaded components registered any&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Request object uses hierarchy providers to determine what components handle the request&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Request object loads the necessary component&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Front controller passes the request object to the Dispatcher&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Dispatcher dispatches the request to the component controller class, passing it the request object&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Component controller class executes and sets data to the request object&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;h3&amp;gt;Templating&amp;lt;/h3&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;Front controller loads template providers specified in configuration&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Template injectors are called, if the loaded components registered any&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Front controller determines template to be used with the request&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Front controller uses a template provider to generate request output&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Request output is sent to browser&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;h3&amp;gt;Midgard MVC Front Controller&amp;lt;/h3&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;p&amp;gt;The Midgard MVC Front Controller midgardmvc_core is responsible for catching a HTTP request and ensuring it gets processed and templated. The Front Controller implements a Singleton pattern, meaning that only a single Midgard MVC Front Controller is available at a time.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;p&amp;gt;The Front Controller is accessible via:&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;pre&amp;gt;$mvc = midgardmvc_core::get_instance();&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;h3&amp;gt;Midgard MVC Dispatcher&amp;lt;/h3&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;p&amp;gt;The Midgard MVC Dispatcher receives a Request object and instantiates and calls the necessary Components and Controllers, and calls their action methods.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;p&amp;gt;The Dispatcher is accessible via:&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;pre&amp;gt;$dispatcher = midgardmvc_core::get_instance()-&amp;amp;gt;dispatcher;&amp;lt;br /&amp;gt;$dispatcher-&amp;amp;gt;dispatch($request);&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;p&amp;gt;Depending on what Controllers and action methods were called (if any), this will either return the Request object with some new data populated or cause an Exception to be thrown.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;</content>
  </org_midgardproject_projectsite_document>
</midgard_object>
